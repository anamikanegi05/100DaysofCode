#include <iostream>
#include <vector>
using namespace std;

// Merge function to count inversions
int merge(int arr[], int temp[], int left, int mid, int right) {
	int i = left;     // Left subarray index
	int j = mid + 1;  // Right subarray index
	int k = left;     // Temp array index
	int inv_count = 0;

	while (i <= mid && j <= right) {
		if (arr[i] <= arr[j]) {  // No inversion
			temp[k++] = arr[i++];
		} else {  // arr[i] > arr[j], inversion occurs
			temp[k++] = arr[j++];
			inv_count += (mid - i + 1); // Count inversions
		}
	}

	while (i <= mid)
		temp[k++] = arr[i++];

	while (j <= right)
		temp[k++] = arr[j++];

	for (int i = left; i <= right; i++)
		arr[i] = temp[i];

	return inv_count;
}

// Merge Sort function
int mergeSort(int arr[], int temp[], int left, int right) {
	int inv_count = 0;
	if (left < right) {
		int mid = (left + right) / 2;

		inv_count += mergeSort(arr, temp, left, mid);
		inv_count += mergeSort(arr, temp, mid + 1, right);
		inv_count += merge(arr, temp, left, mid, right);
	}
	return inv_count;
}

// Function to count inversions
int countInversion(int arr[], int n) {
	vector<int> temp(n);
	return mergeSort(arr, temp.data(), 0, n - 1);
}

int main() {
	int n;
	cout << "Enter size: ";
	cin >> n;

	int arr[n];  // Dynamically allocate array
	cout << "Enter elements: ";
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}

	cout << "No. of inversions are: " << countInversion(arr, n) << endl;
	return 0;
}
