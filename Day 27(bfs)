#include <iostream>
#include <queue>
using namespace std;

void BFS(int graph[10][10], int nodes, int start) {
    queue<int> q;
    bool visited[10] = {false};

    // Start BFS
    q.push(start);
    visited[start] = true;

    cout << "BFS Traversal: ";
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node + 1 << " ";  // Convert back to 1-based index

        // Check all adjacent nodes
        for (int i = 0; i < nodes; i++) {
            if (graph[node][i] == 1 && !visited[i]) {
                q.push(i);
                visited[i] = true;
            }
        }
    }
    cout << endl;
}

int main() {
    int nodes, edges;
    cout << "Enter number of nodes and edges: ";
    cin >> nodes >> edges;

    int graph[10][10] = {0}; // Initialize adjacency matrix

    cout << "Enter edges (u v format, 1-based index):" << endl;
    for (int i = 0; i < edges; i++) {
        int u, v;
        cin >> u >> v;
        graph[u - 1][v - 1] = 1;  // Convert to 0-based index
        graph[v - 1][u - 1] = 1;  // Since it's an undirected graph
    }

    int start;
    cout << "Enter starting node: ";
    cin >> start;

    BFS(graph, nodes, start - 1); // Convert start node to 0-based index

    return 0;
}
